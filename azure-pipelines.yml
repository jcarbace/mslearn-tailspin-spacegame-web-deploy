trigger:
- '*'

variables:
  buildConfiguration: 'Release'

stages:
- stage: 'Build'
  displayName: 'Build the web application'
  condition: |
      and(
        eq(variables['Build.Reason'], 'PullRequest'),
        eq(variables['System.PullRequest.SourceBranch'], 'refs/heads/branch_with_build_validation'),
        ne(variables['System.PullRequest.IsDraft'], 'true'),
        in(variables['System.PullRequest.TargetBranch'], 'refs/heads/main')
      )
  jobs: 
  - job: 'Build'
    displayName: 'Build job'
    pool:
      vmImage: 'ubuntu-20.04'
      demands:
      - npm

    variables:
      wwwrootDir: 'Tailspin.SpaceGame.Web/wwwroot'
      dotnetSdkVersion: '6.x'

    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET SDK $(dotnetSdkVersion)'
      inputs:
        version: '$(dotnetSdkVersion)'

    - task: Npm@1
      displayName: 'Run npm install'
      inputs:
        verbose: false

    - script: './node_modules/.bin/node-sass $(wwwrootDir) --output $(wwwrootDir)'
      displayName: 'Compile Sass assets'

    - task: gulp@1
      displayName: 'Run gulp tasks'

    - script: 'echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)" > buildinfo.txt'
      displayName: 'Write build info'
      workingDirectory: $(wwwrootDir)

    - task: DotNetCoreCLI@2
      displayName: 'Restore project dependencies'
      inputs:
        command: 'restore'
        projects: '**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Build the project - $(buildConfiguration)'
      inputs:
        command: 'build'
        arguments: '--no-restore --configuration $(buildConfiguration)'
        projects: '**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Publish the project - $(buildConfiguration)'
      inputs:
        command: 'publish'
        projects: '**/*.csproj'
        publishWebProjects: false
        arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
        zipAfterPublish: true

  - job: 'CIafterMerge'
    displayName: 'CI after merge job'
    condition: |
      and(
        eq(variables['Build.Reason'], 'PullRequestMerge'),
        eq(variables['System.PullRequest.SourceBranch'], 'refs/heads/branch_with_build_validation'),
        eq(variables['System.PullRequest.TargetBranch'], 'refs/heads/main')
      )
    pool:
      vmImage: 'ubuntu-20.04'
      demands:
      - npm
      - DotNetCore

    steps:
    - script: echo "This is the CI build after merge"
      displayName: 'Execute CI build after merge'
      
- stage: 'ComplianceSecScan'
  displayName: 'Compliance Security Scan'
  dependsOn: Build
  jobs: 
  - job: 'ComplianceSecurityScan'
    displayName: 'Compliance Security Scan job'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - script: |
        # Ejecutar escaneo de seguridad
        npm run security-scan
      displayName: 'Run security scan'

- stage: 'CodeQualityChecks'
  displayName: 'Code Quality Checks'
  dependsOn: Build
  jobs: 
  - job: 'CodeQualityChecks'
    displayName: 'Code Quality Checks job'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - script: |
        # Ejecutar linting para el c칩digo
        npm run lint
      displayName: 'Run linting'

    - script: |
        # Ejecutar pruebas unitarias
        npm run test
      displayName: 'Run unit tests'

    - script: |
        # Ejecutar an치lisis est치tico de c칩digo
        npm run static-analysis
      displayName: 'Run static code analysis'

- stage: 'FunctionalQualityChecks'
  displayName: 'Functional Quality Checks'
  dependsOn: Build
  jobs: 
  - job: 'FunctionalQualityChecks'
    displayName: 'Functional Quality Checks job'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - script: |
        # Agrega las tareas necesarias para las comprobaciones de calidad funcional
        npm run functional-tests
      displayName: 'Run functional tests'

- stage: 'PublishArtifact'
  displayName: 'Publish the artifact'
  dependsOn: 
    - ComplianceSecScan
    - CodeQualityChecks
    - FunctionalQualityChecks

  condition: ne(variables['Build.Reason'], 'PullRequest')
  jobs: 
  - job: 'Publish'
    displayName: 'Publish'
    pool:
      vmImage: 'ubuntu-20.04'
      demands:
      - npm
    steps:
    - publish: '$(Build.ArtifactStagingDirectory)'
      artifact: drop

- stage: 'Deploy'
  displayName: 'Deploy the web application'
  dependsOn: PublishArtifact
  condition: ne(variables['Build.Reason'], 'PullRequest')
  jobs:
  - deployment: Deploy
    pool:
      vmImage: 'ubuntu-20.04'
    environment: dev
    variables:
    - group: Release
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop
          - task: AzureWebApp@1
            displayName: 'Azure App Service Deploy: website'
            inputs:
              azureSubscription: 'Resource Manager - Tailspin - Space Game'
              appName: '$(WebAppName)'
              package: '$(Pipeline.Workspace)/drop/$(buildConfiguration)/*.zip'
